---
layout: post
title:  "Rock Paper Coding: Chapter Two - Competition is Useless"
date:   2017-05-21 01:22:00 -0500
categories: ['book']
comments: true
post_id: 597db613-3b42-402c-833a-518652108a34
summary: >
         Chapter two of my book - Rock Paper Coding. We take a look at home competition affects the workplace and what you can do about it.
---

When I consider all the time and effort spent competing with other employees it immediately jumps out at me as missed opportunities for me and the organization overall. One particular missed opportunity that comes to mind immediately involves a team in which I worked with a very smart young engineer. The issue (and ensuing tension)  arose from the fact that when I came on board, the overall sentiment was that I was more senior than he was. Our titles were the same, but our boss needed someone with the expertise I possessed with a modern framework.  The project involved a massive migration and because I had just participated in a similar effort in a previous role I came in prideful and expected to be respected. All should bow down to my intellectual superiority! Of course, that's a foolish way to go about it, but this is why I'm sharing this experience - so you can do better. Instead of harnessing the potential power of my senior experience and his raw talent I reverted to an immature state and allowed my pride to wage war. I found myself responding to the rejection of my leadership.  Instead of being more understanding, empathetic or more emotionally intelligent toward his disposition I was mostly reacting in kind. The real value would have been for me to find a way to work with that person. This reflection is not leading to a Kumbaya session nor is this a section telling you to swallow your pride and be the bigger person. There is a bigger picture to consider at all times. The team and the product are more important than your pride.

I failed at this challenge, but that doesn't mean that you have to follow my poor example. Let's revisit this scenario with hindsight and wisdom. What are the steps I should have taken? My first step should have been to analyze the situation and defuse the tension before it became a wedge between the two of us and our working relationship. Work relationships are always challenging because people are different - that's it. Sometimes you make friends that last a lifetime, and on the flip side, you can make enemies that last just as long. Keeping the bigger picture in focus would have caused me to inspect my actions and attitude. Armed with that insight I would have had a window into the future, and perhaps, I would have been able to see that my behavior was counterproductive towards my personal goals (being fruitful in the team) and the company goals (delivering a quality product). Why am I so critical of myself here? Frankly, I am criticizing my actions because I chose to compete instead of co-operating. I jockeyed for position instead of seeking a solution that allowed us both to contribute our best work. Choosing to not to compete here means asking oneself a particularly difficult question: what can I do differently? This question is difficult because it places responsibility on you for issues for which you may not even be at fault. I'd argue that not recognizing this as an opportunity for growth when in this situation is a sign of immaturity. Who cares who takes the blame? Your value increases to your leaders when you act with a leadership posture that leads to progress for the company. If you desire to be in leadership, then lead. I should have started by positioning myself such that we could have built amazing things together. Should that not have worked itself out then at least we would have been in a less volatile situation. How does one position oneself to lead when no one wants to follow? Another step would have been to attempt to uncover the source of the tension. In this case, I knew from where the conflict stemmed (or at least I had a good idea as to what I perceived the source to be). Something as simple as a lunch or coffee probably could have made inroads. But timing is everything here. The time I spent competing meant festering feelings and mounting levels of dislike materialized on both sides. This employee ended up leaving the company and finally in a moment of transparency they revealed that I was the problem. Perception is reality. This entire time I believed myself to be the altruistic innocent party, and to him, I was the problem. While we'll never know for sure, I hold on to the idea that a pivot in my attitude and actions early on could have changed all of this. That pivot could have been a shift towards more understanding, more patience and being more diligent with trying to create successful transactions between us.

What do you do when someone is working against you, and you've tried to be a leader? First and foremost don't fall into it the negative cycle that places you in the role of the victim who is powerless to effect change. In another instance, I worked with an individual who seemed to find fault in everything I proposed or created. My natural inclination was to do the same and to take up the victim mantle. As a victim I'm not responsible for anything - everything is happening to me. Again this is a place where you can easily fail this challenge and not know what the right course of action you should take. The best approach or at least what I recommend is to be self-aware. A lot of this book will talk about you knowing yourself and understanding people around you. I admit that this may borderline on the self-help variety but if it is helping you to become a better engineer then call it what you want. Being more observant of the behavior and interactions with others is critical for success in these types of circumstances. My recognition that this person may not have even realized that their behavior was making me feel attacked means that I should do something different. What should I do? In this case, learn to brush it off. I could have competed with this co-worker and tried to find a way to criticize this person's work, or I could have made a better effort to read the situation. Competition is not the solution here because all competition does here is to create a rift between you and your co-workers. If you have the overwhelming desire to compete, then go to a hack-a-thon. In that environment competition is the name of the game. You should always aim to be the best version of yourself, and you should seek to be the best contributor on your team. I am the type of person that enjoys accolades and acknowledgment. As I matured in my career, I discovered that after the accolades I needed something more. I had to start to decide what's next. That's when I learned to turn my focus outward and start to think about what can I do for my team such that we as a team can be the best. When my team is the best, then we can use that influence to make the other surrounding teams the best. When all of those teams are the best we can make our company the best, and we can have the biggest impact. Having a larger goal like this is higher order thinking, and this is a different style of self and lateral leadership.
 
If you find yourself in a situation where you feel that you are the best engineer and have the competitive mindset that you want to remain the best let me warn you now that this thought process is short-sighted. The next step for you is to think about the improvements that can be implemented to make the team better. At times we find ourselves to be more experienced than some other team members. It is easy to follow our common inclination: to complain or criticize those co-workers for their perceived lack of effort, ability or talent. But if we fight against that urge and look inside to our internal leader that wants to add the most value to the team we can instead ask what steps can be taken to improve those people. You do not need to be their direct manager or supervisor to help them develop. All that's required is the desire to help others. This is where the concept of lateral leadership comes into play. It may seem that you will have the most value by being the best contributor, but you have to remember that you are only one person. Even when contributing the most one consequence ends up being resentment of those who aren't contributing the same amount. Another consequence is uniquely self-positioning for burnout. Here's something that I decided to do to help to enhance the team around me. By building the relationships necessary I was able to talk to the many of the team members and get some honest feedback. I was able to find out which areas provided the biggest challenges and which areas others were strongest. Equipped with this knowledge I was then able to start to leverage these groups and set up lunch and learns. These lunch time talks (with food provided) gave a platform for the more capable developers to knowledge share in an informal setting with a (semi) captive audience. These are short one-hour talks that will allow someone to share their knowledge and ability with people who are willing to learn it inside the office space. We have created an environment where peers tutor and mentor and grow each other without them even realizing what they are doing. Another practical example of this is asking your team members who are stronger at a concept or particular content to build something such as a Wiki page for some documentation.

Now let's take a step back and look at the bird's eye view of the system and culture that we are now creating. By sharing information and improving the team around us we immediately escalate our value. In the "old days" a person was considered indispensable if they held some knowledge to themselves regarding some critical business process. "We can't let Johnson go! She's the only one who knows that system!" The thing that Johnson (and the people who hired her) didn't understand was that Johnson had a "bus factor" of 1. In short, the bus factor is how many people have to get hit by a bus before the process breaks down. You, of course, don't want a low bus factor; you want the opposite in fact. Having a higher bus factor on a team can dramatically reduce the amount of frustration experienced by everyone on the development team. Johnson doesn't have to die for the bus factor to take effect. What if Johnson goes on an extended vacation in which she doesn't have cell phone access. Perhaps Johnson leaves to a new opportunity. If she is the only person with that knowledge, the team is bigger trouble than we know. Admittedly, this is a slight deviation from our topic of competition, but it is nonetheless an important point to make. Your actions as a community-minded engineer address this issue and others like this when you have a focus on team improving acts.